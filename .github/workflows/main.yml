---
name: Main

on:
  push:
    branches:
      - dev
      - stage
      - master
  pull_request:

jobs:
  job_go_checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Print github env vars
        run: |
          echo github.event_name: ${{ github.event_name }}
          echo github.ref: ${{ github.ref }}
          echo github.ref_name: ${{ github.ref_name }}
          echo github.head_ref: ${{ github.head_ref }}
          echo github.base_ref: ${{ github.base_ref }}
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: Tidy go module
        run: |
          go mod tidy
          if [[ $(git status --porcelain) ]]; then
            git diff
            echo
            echo "go mod tidy made these changes, please run 'go mod tidy' and include those changes in a commit"
            exit 1
          fi
      - name: Run gofmt
        # Run gofmt first, as it's quick and issues are common.
        run: diff -u <(echo -n) <(gofmt -s -d .)
      - name: Run go vet
        run: go vet ./...
      - name: Run go generate
        run: |
          go generate ./...
          if [[ $(git status --porcelain) ]]; then
            git diff
            echo
            echo "go generate made these changes, please run 'go generate ./...' and include those changes in a commit"
            exit 1
          fi
      - name: Download staticcheck
        # staticcheck provides a github action, use it (https://staticcheck.io/docs/running-staticcheck/ci/github-actions/)
        # or use golangci-lint (github action) with staticcheck as enabled linter
        run: |
          curl -L https://github.com/dominikh/go-tools/releases/download/2023.1.2/staticcheck_linux_amd64.tar.gz | tar -xzf -
      - name: Run staticcheck
        run: |
          ./staticcheck/staticcheck ./... 2> staticcheck/stderr
      - name: Check staticcheck stderr (this step isn't needed because we are using actions/setup-go@v3 on GitHub hosted runner)
        run: |
          if cat staticcheck/stderr | grep "matched no packages" ; then
            echo "staticcheck step did nothing, due to https://github.com/vocdoni/vocdoni-node/issues/444"
            echo "Please re-run job."
            # seize the opportunity to fix the underlying problem: a permissions error in ~/.cache
            epoch=$(date +%s)
            # if any file is reported by find, grep returns true and the mv is done
            if [ -d ~/.cache ] && find ~/.cache -not -user `id --user` -print0 | grep -qz . ; then
              echo "~/.cache had broken permissions, moving it away... (cache will be rebuilt with usage)"
              mv -v ~/.cache ~/.cache-broken-by-root-$epoch
            fi
            exit 2
          fi

  job_go_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: Run Go test (and collect code coverage)
        if: |
          github.ref != 'refs/heads/master'
          && github.ref != 'refs/heads/stage'
          && !startsWith(github.ref, 'refs/heads/release')
          && github.ref != 'refs/heads/dev'
          && github.ref != 'refs/heads/apiv2'
        run: go test -coverprofile=unit.covdata.txt ./...
      - name: Run Go test -race (and collect code coverage)
        if: |
          github.ref == 'refs/heads/master'
          || github.ref == 'refs/heads/stage'
          || startsWith(github.ref, 'refs/heads/release')
          || github.ref == 'refs/heads/dev'
          || github.ref == 'refs/heads/apiv2'
        env:
          LOG_PANIC_ON_INVALIDCHARS: true # check that log lines contains no invalid chars (evidence of format mismatch)
        run: go test -coverprofile=unit.covdata.txt -vet=off -timeout=15m -race ./... # note that -race can easily make the crypto stuff 10x slower
      - name: Archive code coverage (unit test)
        uses: actions/upload-artifact@v3
        with:
          name: unit-code-coverage
          path: unit.covdata.txt
      - name: Send unit test coverage to coveralls.io
        uses: shogo82148/actions-goveralls@v1
        with:
          path-to-profile: unit.covdata.txt
          flag-name: unit
          parallel: true

  job_compose_test:
    runs-on: [self-hosted, ci2-1]
    if: |
      github.ref == 'refs/heads/master'
      || github.ref == 'refs/heads/stage'
      || startsWith(github.ref, 'refs/heads/release')
      || github.ref == 'refs/heads/dev'
      || github.ref == 'refs/heads/apiv2'
      || (startsWith(github.ref, 'refs/pull/') && endsWith(github.ref, '/merge') )
      || github.ref == 'refs/heads/main'
    steps:
      - name: Set non-root owner to dockerfiles/testsuite folder
        run: |
          dir="${{ github.workspace }}/dockerfiles/testsuite/"
          if [ -d "$dir" ]; then
            ls -la $dir
            sudo chown -R $USER:sudo $dir
            echo "Checking again permissions/owner"
            ls -la $dir
          else
            echo "Seems the $dir folder doesn't exist"
          fi
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Run compose script
        env:
          TESTSUITE_BUILD_TAG: ${{ github.sha }}
          COMPOSE_PROJECT_NAME: testsuite_${{ github.run_id }} # unique name for docker-compose (needed for concurrent job runs)
          COMPOSE_DVOTE_PORT_MAPPING: "9090" # this binds gateway0 to a random available port on docker host (needed for concurrent job runs)
          COMPOSE_HOST_PATH: ${{ github.workspace }}/dockerfiles/testsuite
          LOG_PANIC_ON_INVALIDCHARS: true # check that log lines contains no invalid chars (evidence of format mismatch)
          GOCOVERDIR: "./gocoverage/" # collect code coverage when running binaries
          CONCURRENT: 1 # run all the start_test.sh tests concurrently
        run: |
          cd dockerfiles/testsuite && ./start_test.sh
      - name: Archive code coverage (integration test)
        uses: actions/upload-artifact@v3
        with:
          name: integration-code-coverage
          path: dockerfiles/testsuite/gocoverage/covdata.txt
      - name: Send integration test coverage to coveralls.io
        uses: shogo82148/actions-goveralls@v1
        with:
          path-to-profile: dockerfiles/testsuite/gocoverage/covdata.txt
          flag-name: integration
          parallel: true

  job_coveralls:
    needs: [job_go_test, job_compose_test]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
    - name: Send coverage to Coveralls.io (finish)
      uses: shogo82148/actions-goveralls@v1
      with:
        parallel-finished: true
