package vochain

import (
	"crypto/sha256"
	"math/big"
	"testing"

	qt "github.com/frankban/quicktest"
	"github.com/vocdoni/arbo"
	"go.vocdoni.io/dvote/crypto/zk"
	"go.vocdoni.io/dvote/crypto/zk/circuit"
	"go.vocdoni.io/dvote/crypto/zk/prover"
	"go.vocdoni.io/dvote/vochain/transaction/vochaintx"
	models "go.vocdoni.io/proto/build/go/models"
)

func TestVoteCheckZkSNARK(t *testing.T) {
	app := TestBaseApplication(t)

	app.TransactionHandler.ZkCircuits = []*circuit.ZkCircuit{
		{VerificationKey: []byte(`{"protocol":"groth16","curve":"bn128","nPublic":7,"vk_alpha_1":["16690211343505291795059441371620861229164781336230094380457367531934880398502","18687425750113507431307649431006465296160825402520895668098920889979328769547","1"],"vk_beta_2":[["14207705963228831532911208547908707881857764048673802573407997316232016069645","5169946860532989220962328004639764432258742190027053377785212905803865274740"],["4197538776290921693016628076984378284386107112507027312002666476718723315728","14982486346550771544786599717754917898007168315267333763571937384967020148718"],["1","0"]],"vk_gamma_2":[["10857046999023057135944570762232829481370756359578518086990519993285655852781","11559732032986387107991004021392285783925812861821192530917403151452391805634"],["8495653923123431417604973247489272438418190587263600148770280649306958101930","4082367875863433681332203403145435568316851327593401208105741076214120093531"],["1","0"]],"vk_delta_2":[["9836283521919524162362072618467164385993916829751935774860692720745045283460","7216835486609498763057336581705106030502032269308636513523642793048958512200"],["18817391490701155044865390957250989507647316788033486416708209062330079667917","3823436901280276243532749593915039612844192405835171889162460221027576148437"],["1","0"]],"vk_alphabeta_12":[[["13637451605841267050718292143833234882903048452950890439594814037598694655073","11014379352423758232580740412230823089396385193947477602886458004186447426362"],["11764131589963512325185350828969172058139776873471186918550949437635493180378","9537806181251743766221625187339749057927266008332183723175168854140667873013"],["12323387886996089659318315423189827935759337676800395401518555428630707159065","3755519908163389474707985652515238243296292900454238378610233994623907177720"]],[["397806229012974097484422551939718648405545801750939874817162728931996802132","360986825744150890257816492588070101912038786039570693970855130512326721546"],["20569965811872242697745192038255134541810751222115475944631106624903990534095","11989503282161871621731994055257983231489826319186702024264453234578107893100"],["20476548451897298370931827127997719116240177997601934258364937517638868349525","14975453099091672574099554417240015193432336025628515180121236038046280291629"]]],"IC":[["20847022605501350740714530819654375895942165539579475530119137815736811604461","21538752418430825688663903899631982385963513267723837796633000804351057613789","1"],["14510347699271695392234942168164260099062168309016157789023484940476637886080","21780389465612356194265797330718101874896571887261230214720807032808209569960","1"],["316212462544792483925934448292712932744059037884499722677156775607958157079","17818003727637156769333137977929926352013884292611162527825471894644882999520","1"],["10355070392545547248810652353299729202930542211024457327988692584690759510188","15092507834841560370283995736577676604749901871765697379444235619500878545111","1"],["7125795549837745349805383350207300368880493706260344771826682732546811147067","2167840839297225432320305838790498886859646728647708741772396629638186084246","1"],["20646860496895637844970851531171373988581613513634256362840983900476047461770","18914128965240184502808181388419488276653343088535427820584486255944936128007","1"],["9911143259996893755451674167563047683437575965028176858176085753919927056268","12986774737462773058778356726324868229692856312437357004864075374280589370328","1"],["20281943857051589088159625152301010942517754575163459444812109987596014629971","19419231722958755364320974348625636368134834457951540188992265699176082139735","1"]]}`)},
	}

	processId := sha256.Sum256(big.NewInt(10).Bytes())
	entityId := []byte("entityid-test")
	censusRoot, ok := new(big.Int).SetString("321719647862408781603871395864861393328840037430074042287229013237429257409", 10)
	qt.Assert(t, ok, qt.IsTrue)

	process := &models.Process{
		ProcessId: processId[:],
		EntityId:  entityId,
		EnvelopeType: &models.EnvelopeType{
			Anonymous: true,
		},
		Mode:       &models.ProcessMode{},
		Status:     models.ProcessStatus_READY,
		CensusRoot: make([]byte, 32),
		StartBlock: 1,
		BlockCount: 3,
	}
	err := app.State.AddProcess(process)
	qt.Assert(t, err, qt.IsNil)
	_, err = app.State.Process(processId[:], false)
	qt.Assert(t, err, qt.IsNil)

	// TODO: Are the following lines still required? If they're not, remove the
	// commented block.

	process, err = app.State.Process(processId[:], false)
	qt.Assert(t, err, qt.IsNil)
	process.CensusRoot = arbo.BigIntToBytes(32, censusRoot)
	err = app.State.UpdateProcess(process, processId[:])
	qt.Assert(t, err, qt.IsNil)

	proof := []byte(`{"pi_a":["2957546178009760850355659133375708838241747312069267323388700501932756388801","12625382869576748444607468191317832575538074530559965599524653975624207047366","1"],"pi_b":[["13773538541838073368502890527643985842772674306822459019965410608828594337298","11899229132740276662537864617463896098667033797486170150360573444081302507492"],["20727379697327122382792515736453901157256422564411007216318251099364487650832","11377671289575129003619036211390137347608265777315381485897664480644768018215"],["1","0"]],"pi_c":["6893085441277923177083572011027014550725412601104441949319558996891945033160","12694921975636511647104559140449350724579343649607032729614636681955579457745","1"]}`)
	pubSignals := []byte(`["242108076058607163538102198631955675649","142667662805314151155817304537028292174","321719647862408781603871395864861393328840037430074042287229013237429257409","4295509861249984880361571032347194270863089509149412623993065795982837479793","1","302689215824177652345211539748426020171","205062086841587857568430695525160476881"]`)

	parsedProof, err := prover.ParseProof(proof, pubSignals)
	qt.Assert(t, err, qt.IsNil)

	nullifierBI, ok := new(big.Int).SetString("4295509861249984880361571032347194270863089509149412623993065795982837479793", 10)
	qt.Assert(t, ok, qt.IsTrue)
	nullifier := arbo.BigIntToBytes(32, nullifierBI)

	weight := new(big.Int).SetInt64(1)
	testVote := &models.VoteEnvelope{
		ProcessId:   processId[:],
		VotePackage: weight.Bytes(),
		Nullifier:   nullifier,
	}
	protoProof, err := zk.ProverProofToProtobufZKProof(0, parsedProof, testVote, process.CensusRoot, weight)
	qt.Assert(t, err, qt.IsNil)

	voteValue := big.NewInt(1).Bytes()
	vtx := &models.VoteEnvelope{
		ProcessId:   processId[:],
		VotePackage: voteValue,
		Nullifier:   nullifier,
		Proof: &models.Proof{
			Payload: &models.Proof_ZkSnark{
				ZkSnark: protoProof,
			},
		},
	}
	signature := []byte{}
	txBytes := []byte{}
	txID := [32]byte{}
	commit := false

	_, _, err = app.TransactionHandler.VoteTxCheck(&vochaintx.VochainTx{
		Tx:         &models.Tx{Payload: &models.Tx_Vote{Vote: vtx}},
		Signature:  signature,
		SignedBody: txBytes,
		TxID:       txID,
	}, commit)
	qt.Assert(t, err, qt.IsNil)

}
